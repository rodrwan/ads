package optimization

import (
	"ads-system/internal/database"
	"ads-system/internal/web/templates"
	"fmt"
	"strconv"

	"github.com/jackc/pgx/v5/pgtype"
)

type OptimizationData struct {
	CampaignAnalysis []database.GetCampaignPerformanceAnalysisRow
	AdAnalysis       []database.GetAdPerformanceAnalysisRow
	BudgetAlerts     []database.GetBudgetAlertsRow
	Recommendations  []database.GetOptimizationRecommendationsRow
}

templ Optimization(data OptimizationData) {
	@templates.Layout("Optimización de Presupuesto - Analytics") {
		<div class="space-y-8">
			<!-- Header -->
			<div class="flex items-center justify-between">
				<div>
					<h1 class="text-3xl font-bold text-white mb-2">Optimización de Presupuesto</h1>
					<p class="text-slate-400">Análisis inteligente y recomendaciones para maximizar el ROI</p>
				</div>
				<div class="flex items-center gap-3">
					<div class="bg-brand-500/10 border border-brand-500/20 rounded-lg px-4 py-2">
						<div class="text-sm text-brand-400">Campañas Activas</div>
						<div class="text-xl font-bold text-white">{ fmt.Sprintf("%d", len(data.CampaignAnalysis)) }</div>
					</div>
				</div>
			</div>

			<!-- Alertas de Presupuesto -->
			if len(data.BudgetAlerts) > 0 {
				<div class="bg-red-500/10 border border-red-500/20 rounded-xl p-6">
					<div class="flex items-center gap-3 mb-4">
						<svg class="w-6 h-6 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"/>
						</svg>
						<h2 class="text-xl font-semibold text-white">Alertas de Presupuesto</h2>
					</div>
					<div class="grid gap-4">
						for _, alert := range data.BudgetAlerts {
							<div class="bg-slate-800/50 rounded-lg p-4 border border-red-500/20">
								<div class="flex items-center justify-between">
									<div>
										<h3 class="font-semibold text-white">{ alert.Name }</h3>
										<p class="text-sm text-slate-400">
											Utilización: { fmt.Sprintf("%.1f%%", float64(alert.BudgetUtilization)) }
										</p>
									</div>
									<div class="text-right">
										<div class="text-sm text-slate-400">Presupuesto</div>
										<div class="font-semibold text-white">${ fmt.Sprintf("%.2f", convertNumericToFloat(alert.Budget)) }</div>
									</div>
								</div>
							</div>
						}
					</div>
				</div>
			}

			<!-- Análisis de Rendimiento de Campañas -->
			if len(data.CampaignAnalysis) > 0 {
				<div class="bg-slate-800/50 rounded-xl p-6 border border-slate-700">
					<h2 class="text-xl font-semibold text-white mb-6">Análisis de Rendimiento de Campañas</h2>
					<div class="overflow-x-auto">
						<table class="w-full text-sm">
							<thead>
								<tr class="border-b border-slate-700">
									<th class="text-left py-3 px-4 text-slate-400 font-medium">Campaña</th>
									<th class="text-right py-3 px-4 text-slate-400 font-medium">Presupuesto</th>
									<th class="text-right py-3 px-4 text-slate-400 font-medium">Gasto</th>
									<th class="text-right py-3 px-4 text-slate-400 font-medium">Impresiones</th>
									<th class="text-right py-3 px-4 text-slate-400 font-medium">Clicks</th>
									<th class="text-right py-3 px-4 text-slate-400 font-medium">CTR</th>
									<th class="text-right py-3 px-4 text-slate-400 font-medium">Clicks/$</th>
									<th class="text-right py-3 px-4 text-slate-400 font-medium">Utilización</th>
								</tr>
							</thead>
							<tbody>
								for _, campaign := range data.CampaignAnalysis {
									<tr class="border-b border-slate-700/50 hover:bg-slate-700/20">
										<td class="py-3 px-4">
											<div class="font-medium text-white">{ campaign.Name }</div>
										</td>
										<td class="text-right py-3 px-4 text-white">
											${ fmt.Sprintf("%.2f", convertNumericToFloat(campaign.Budget)) }
										</td>
										<td class="text-right py-3 px-4 text-white">
											${ fmt.Sprintf("%.2f", convertInterfaceToFloat(campaign.TotalSpend)) }
										</td>
										<td class="text-right py-3 px-4 text-white">
											{ fmt.Sprintf("%d", campaign.Impressions) }
										</td>
										<td class="text-right py-3 px-4 text-white">
											{ fmt.Sprintf("%d", campaign.Clicks) }
										</td>
										<td class="text-right py-3 px-4 text-white">
											{ fmt.Sprintf("%.2f%%", float64(campaign.Ctr)) }
										</td>
										<td class="text-right py-3 px-4 text-white">
											{ fmt.Sprintf("%.2f", float64(campaign.ClicksPerDollar)) }
										</td>
										<td class="text-right py-3 px-4">
											<span class={ fmt.Sprintf("px-2 py-1 rounded-full text-xs font-medium %s", getUtilizationColor(campaign.BudgetUtilization)) }>
												{ fmt.Sprintf("%.1f%%", float64(campaign.BudgetUtilization)) }
											</span>
										</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				</div>
			}

			<!-- Análisis de Rendimiento de Anuncios -->
			if len(data.AdAnalysis) > 0 {
				<div class="bg-slate-800/50 rounded-xl p-6 border border-slate-700">
					<h2 class="text-xl font-semibold text-white mb-6">Análisis de Rendimiento de Anuncios</h2>
					<div class="overflow-x-auto">
						<table class="w-full text-sm">
							<thead>
								<tr class="border-b border-slate-700">
									<th class="text-left py-3 px-4 text-slate-400 font-medium">Anuncio</th>
									<th class="text-right py-3 px-4 text-slate-400 font-medium">Impresiones</th>
									<th class="text-right py-3 px-4 text-slate-400 font-medium">Clicks</th>
									<th class="text-right py-3 px-4 text-slate-400 font-medium">CTR</th>
									<th class="text-right py-3 px-4 text-slate-400 font-medium">Gasto</th>
									<th class="text-right py-3 px-4 text-slate-400 font-medium">Clicks/$</th>
								</tr>
							</thead>
							<tbody>
								for _, ad := range data.AdAnalysis {
									<tr class="border-b border-slate-700/50 hover:bg-slate-700/20">
										<td class="py-3 px-4">
											<div class="font-medium text-white">{ ad.Title.String }</div>
										</td>
										<td class="text-right py-3 px-4 text-white">
											{ fmt.Sprintf("%d", ad.Impressions) }
										</td>
										<td class="text-right py-3 px-4 text-white">
											{ fmt.Sprintf("%d", ad.Clicks) }
										</td>
										<td class="text-right py-3 px-4 text-white">
											{ fmt.Sprintf("%.2f%%", float64(ad.Ctr)) }
										</td>
										<td class="text-right py-3 px-4 text-white">
											${ fmt.Sprintf("%.2f", convertInterfaceToFloat(ad.TotalSpend)) }
										</td>
										<td class="text-right py-3 px-4 text-white">
											{ fmt.Sprintf("%.2f", float64(ad.ClicksPerDollar)) }
										</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				</div>
			}

			<!-- Recomendaciones de Optimización -->
			if len(data.Recommendations) > 0 {
				<div class="bg-slate-800/50 rounded-xl p-6 border border-slate-700">
					<div class="flex items-center gap-3 mb-6">
						<svg class="w-6 h-6 text-brand-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/>
						</svg>
						<h2 class="text-xl font-semibold text-white">Recomendaciones de Optimización</h2>
					</div>
					<div class="grid gap-4">
						for _, rec := range data.Recommendations {
							<div class="bg-slate-700/30 rounded-lg p-4 border border-slate-600">
								<div class="flex items-start justify-between">
									<div class="flex-1">
										<h3 class="font-semibold text-white mb-2">{ rec.Name }</h3>
										<p class="text-sm text-slate-400 mb-3">{ rec.RecommendationText }</p>
										<div class="flex items-center gap-4 text-xs text-slate-500">
											<span>CTR: { fmt.Sprintf("%.2f%%", float64(rec.Ctr)) }</span>
											<span>Clicks/$: { fmt.Sprintf("%.2f", float64(rec.ClicksPerDollar)) }</span>
											<span>Gasto: ${ fmt.Sprintf("%.2f", convertInterfaceToFloat(rec.TotalSpend)) }</span>
										</div>
									</div>
									<div class="text-right">
										<div class="text-sm text-slate-400 mb-1">Recomendación</div>
										<div class="font-semibold text-brand-400">{ rec.Recommendation }</div>
									</div>
								</div>
							</div>
						}
					</div>
				</div>
			}

			<!-- Sin datos -->
			if len(data.CampaignAnalysis) == 0 && len(data.BudgetAlerts) == 0 && len(data.Recommendations) == 0 {
				<div class="text-center py-12">
					<svg class="w-16 h-16 text-slate-600 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/>
					</svg>
					<h3 class="text-lg font-semibold text-white mb-2">No hay datos de optimización</h3>
					<p class="text-slate-400">Crea algunas campañas y genera tráfico para ver recomendaciones de optimización.</p>
				</div>
			}
		</div>
	}
}

// Helper functions
func convertNumericToFloat(n pgtype.Numeric) float64 {
	if !n.Valid {
		return 0
	}
	if n.Int != nil {
		return float64(n.Int.Int64()) / 100.0
	}
	return 0
}

func convertInterfaceToFloat(v interface{}) float64 {
	switch val := v.(type) {
	case float64:
		return val
	case float32:
		return float64(val)
	case int64:
		return float64(val)
	case int32:
		return float64(val)
	case int:
		return float64(val)
	case string:
		if f, err := strconv.ParseFloat(val, 64); err == nil {
			return f
		}
		return 0
	default:
		return 0
	}
}

func getUtilizationColor(utilization int32) string {
	switch {
	case utilization >= 90:
		return "bg-red-500/20 text-red-400"
	case utilization >= 75:
		return "bg-yellow-500/20 text-yellow-400"
	case utilization >= 50:
		return "bg-blue-500/20 text-blue-400"
	default:
		return "bg-green-500/20 text-green-400"
	}
}